<!DOCTYPE html>
<html>

<head>
    <title>Localizing the Map</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
    html,
    body,
    #map-canvas {
        height: 100%;
        margin: 0px;
        padding: 0px
    }

	.labels_white {
        color: #ffffff;
        font-family: "Lucida Grande", "Aral", sans-serif;
        font-size: 15px;
        font-weight: bold;
        text-align: center;
        width: 35px;
        border: 2px;
        /*white-space: nowrap;*/
    }
    
    .labels_red {
        color: #ffffff;
        font-family: "Lucida Grande", "Aral", sans-serif;
        font-size: 25px;
        font-weight: bold;
        text-align: center;
        width: 35px;
        border: 2px;
        white-space: nowrap;
    }
    
    .labels_darkred {
        color: #ffffff;
        font-family: "Lucida Grande", "Aral", sans-serif;
        font-size: 25px;
        font-weight: bold;
        text-align: center;
        width: 35px;
        border: 2px;
        white-space: nowrap;
    }
    
    .labels_yellow {
        color: #ffffff;
        font-family: "Lucida Grande", "Aral", sans-serif;
        font-size: 25px;
        font-weight: bold;
        text-align: center;
        width: 35px;
        border: 2px;
        white-space: nowrap;
    }
    
    .labels_green {
        color: #ffffff;
        font-family: "Lucida Grande", "Aral", sans-serif;
        font-size: 25px;
        font-weight: bold;
        text-align: center;
        width: 35px;
        border: 2px;
        white-space: nowrap;
    }  
    
    .button {
            width: 50px;
            height: 35px;
            border: 0;
            background-size: 100%; /* To fill the dimensions of container (button), or */
            background-size: 40px auto; /* to specify dimensions explicitly */
            background-color: #96fd50;
            border-radius: 5px;
        }
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&language=zh-TW"></script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
    <script src="http://140.92.88.92:38080/TrafficPlatform/MarkerLabel.js" type="text/javascript"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAmUejuXfhXsNmB17zducINT343TI6TO_8" type="text/javascript"></script>
    <link rel="stylesheet" href="./assets/vendor/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="./assets/css/kyart.css">
    <!-- Library 主要設定檔-->
    <script src="./assets/js/jquery.min.js"></script>
    <script src="./assets/vendor/bootstrap/js/bootstrap.min.js"></script>
    <script src="./assets/js/ui_setting.js"></script>    
    <script>
    var map;
    var infoWindow;
    var mylat;
    var mylon;
    var kmlName;
    var mapMarker;
    var jsonData;
    var nnow=0;
    var nvender=0;
    var nprice = 0;
    var lookup=[];
    var markers = [];
    //var image = new google.maps.MarkerImage("iam.png", null, null, null, new google.maps.Size(55, 55));
    var image = new google.maps.MarkerImage("smallcar-hdpi.png", null, null, null, new google.maps.Size(40, 40));
    var darkred = new google.maps.MarkerImage("location_darkred.png", null, null, null, new google.maps.Size(64, 64));
    var red = new google.maps.MarkerImage("location_red.png", null, null, null, new google.maps.Size(64, 64));
    var yellow = new google.maps.MarkerImage("location_yellow.png", null, null, null, new google.maps.Size(64, 64));
    var green = new google.maps.MarkerImage("location_green.png", null, null, null, new google.maps.Size(64, 64));
    
    var parkgreenmax = new google.maps.MarkerImage("pin-park-max.png", null, null, null, new google.maps.Size(31, 43));
    var parkgreenmin = new google.maps.MarkerImage("pin-park-min.png", null, null, null, new google.maps.Size(31, 43));
    var parkgreenfull = new google.maps.MarkerImage("pin-park-full.png", null, null, null, new google.maps.Size(31, 43));
    
    var currentLat, currentLon, parkMarkerLat, parkMarkerLon;
    var nyLayer,nyLayer0,markerMy,nyLayer1,routeFlag;
    var Data_real_change;
    var isRouting;

    //lati,longi  //25.0346882,121.5167491
    //function initialize(mylat1,mylon1) {
 	function initialize() {
		mylat = AndroidFunction.MyLoc_lat();
     	mylon = AndroidFunction.MyLoc_lon();
     	//alert(mylat + " " + mylon);
     	kmlName = AndroidFunction.kmlName();
     	console.log(mylat + "," + mylon + "," + kmlName);
     	
     	routeFlag=1;
     	var mapMarker;
     	var my = new google.maps.LatLng(mylat, mylon);
     	var mapOptions = {
                zoom: 15,
                streetViewControl: false,
                zoomControl: false,
                mapTypeControl: false,
                center: my
        };
     	map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

     	//var layers = [];
		//layers[0] = new google.maps.KmlLayer("http://140.92.88.92:38080/TrafficPlatform/"+kmlName, {
        //	preserveViewport: true,
        //	map: map
     	//});
     	var Data1 = httpGet("https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/" + "roadinfo?period=0&lon="+mylon+"&lat="+mylat);
         //var Data1 = httpGet("https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/" + "roadinfo?period=0&lon="+mylon1+"&lat="+mylat1);
         Data1 = Data1.replace('"', '');
         Data1 = Data1.replace('"', '');
         nyLayer0 = new google.maps.KmlLayer(Data1, {
             suppressInfoWindows: true,
             map: map,
             preserveViewport: true
         });
     	
     	infoWindow = new google.maps.InfoWindow();
     		markerMy = new google.maps.Marker({
        	position: my,
        	map: map,
        	icon: image
     	});
     	markerMy.setMap(map);
     	
     	var position = map.getCenter();
        var lat = position.lat();
        var lon = position.lng();
        drawparkmark(lat,lon,nnow,nprice,nvender);
   
        map.addListener('dragend', function() {

        	if(isRouting == 0)
        	{
                var position = map.getCenter();
                var mylat1 = position.lat();
                var mylon1 = position.lng();

                setTimeout(function () {
                    var Data1 = httpGet("https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/" + "roadinfo?period=0"+"&lon="+mylon1+"&lat="+mylat1+"&range=1000");
                    //var Data1 = httpGet("https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/" + "roadinfo?period=0&lon="+mylon1+"&lat="+mylat1);
                    //alert(Data1);
                    if(Data1 != Data_real_change)
                    {
                        Data_real_change = Data1;
                        //alert(Data1);
                        Data1 = Data1.replace('"', '');
                        Data1 = Data1.replace('"', '');

                        if(!(nyLayer0 == null)) {
                            nyLayer0.setMap(null);
                        }

                        nyLayer0 = new google.maps.KmlLayer(Data1, {
                            suppressInfoWindows: true,
                            map: map,
                            preserveViewport: true
                        });
                    }
                }, 500);
            }
        	
        	
        	// 3 seconds after the center of the map has changed, pan back to the marker.
        	if(routeFlag==1){
                var position = map.getCenter();
                var lat = position.lat();
                var long = position.lng();
                //var trafficlink = "http://140.92.88.92:38080/ParkingSearch/ParkingSearch?type=go&lon="+long+"&lat="+lat+"&range=500";
                setTimeout(function(){
                	drawparkmark(lat, long, nnow, nprice, nvender);
                }, 10);
            }
        });

    }
 	function drawparkmark(lat,lon,now,price,vender)
    {
        var trafficlink = "https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/parkinginfo?period="+nnow+"&lon="+lon+"&lat="+lat+"&range=500"+"&hourly="+nprice+"&vendor="+nvender;
        //alert(trafficlink);
        setTimeout(function(){
            jsonData = httpGet(trafficlink);
            //alert(jsonData);
            displayParkMarkers();
        }, 2000);
    }
    function parknow(now)//now =0 ;after30min =1 ;after60min = 2
    {
    	deleteMarkers();
        routeFlag=1;
        nyLayer0.setMap(map);//redisplay
        if(!(nyLayer1 == null)) {
            nyLayer1.setMap(null);//clean router path
        }
        
        nnow = now;
        isRouting = 0;
        drawparkmark(map.getCenter().lat(),map.getCenter().lng(),nnow,nprice,nvender);
    }
    function pricesearch(price)
    {
        deleteMarkers();
        routeFlag=1;
        nyLayer0.setMap(map);//redisplay
        if(!(nyLayer1 == null)) {
            nyLayer1.setMap(null);
        }
        
        nprice = price;
        isRouting = 0;
        //alert("nprice=" + nprice);
        drawparkmark(map.getCenter().lat(),map.getCenter().lng(),nnow,nprice,nvender);
    }
    function vendersearch(vender)
    {
        deleteMarkers();
        routeFlag=1;
        nyLayer0.setMap(map);//redisplay
        if(!(nyLayer1 == null)) {
            nyLayer1.setMap(null);
        }
        
        nvender = vender;
        isRouting = 0;
        drawparkmark(map.getCenter().lat(),map.getCenter().lng(),nnow,nprice,nvender);
    }
    function httpGet(theUrl)
    {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", theUrl, false ); // false for synchronous request
        xmlHttp.send(null);
        return xmlHttp.responseText;
    }
    function showlayer(link1)
    {
        AndroidFunction.UpdateMyLoc_latlon();
        mylat = AndroidFunction.MyLoc_lat();
        mylon = AndroidFunction.MyLoc_lon();
        
    	setTimeout(function () {
            var Data1 = httpGet("https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/" + "roadinfo?period=0&lon="+mylon+"&lat="+mylat);
            //var Data1 = httpGet("https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/" + "roadinfo?period=0&lon="+mylon1+"&lat="+mylat1);
            Data1 = Data1.replace('"', '');
            Data1 = Data1.replace('"', '');
            nyLayer0 = new google.maps.KmlLayer(Data1, {
                suppressInfoWindows: true,
                map: map,
                preserveViewport: true
            });
            
        }, 10);

        setTimeout(function () {
            var position = map.getCenter();
            var lat = position.lat();
            var long = position.lng();
            drawparkmark(lat, long, nnow, nprice, nvender);
        }, 10);
    }

    function showInfo(){
        eventFunction();
    }

    function eventFunction() {
        displayEventMarkers();
    }

function displayParkMarkers(){
    
    // this variable sets the map bounds according to markers position
    var bounds = new google.maps.LatLngBounds();
    var markersData = JSON.parse(jsonData);
    //console.log(markersData.length);
    // for loop traverses markersData array calling createMarker function for each marker
    for (var i = 0; i < markersData.length; i++){
        var latlng = new google.maps.LatLng(markersData[i].latitude, markersData[i].longitude);
        var name = markersData[i].name;
        var address = markersData[i].address;
        var available = markersData[i].available;
        var total = markersData[i].total;
        var hourly = markersData[i].hourly;
        var open = markersData[i].open;
        var height = markersData[i].height;
        var access = markersData[i].access;
        var subType = markersData[i].subType;
        
        var search = [markersData[i].latitude, markersData[i].longitude];
        if(isLocationFree(search))
        {
            createParkMarker(latlng,name,address,available,total,hourly,open,height,access,subType);
            // marker position is added to bounds variable
            bounds.extend(latlng);
            lookup.push(search);
        }        
    }
}
function isLocationFree(search) {
    for (var i = 0, l = lookup.length; i < l; i++) {
        if (lookup[i][0] === search[0] && lookup[i][1] === search[1]) {
                return false;
            }
        }
        return true;
}
function createParkMarker(latlng,name,address,available,total,hourly,open,height,access,subType){
    var icondata;

    if (available > 5) {
        icondata = parkgreenmax;
    } else if (available <= 5) {
        icondata = parkgreenmin;
    } else{
        icondata = parkgreenfull;
    }

    if(hourly=="N/A")
        hourly="";
    
    var marker1 = new MarkerWithLabel({
        position: latlng,
        draggable: false,
        raiseOnDrag: false,
        map: map,
        icon: icondata,
        labelContent: hourly,
        labelAnchor: new google.maps.Point(22, 0),
        labelClass: "labels_white", // the CSS class for the label
        labelStyle: {
            opacity: 1
        },
        labelAnchor: new google.maps.Point(17, 35),
    });　
    mapMarker = new google.maps.Marker(marker1);
        
    var parkIcon_r = new google.maps.MarkerImage("park_icon_red.png", null, null, null, new google.maps.Size(55,55));
    var marker = new google.maps.Marker({
                                            map: map,
                                            position: latlng,
                                            title: name,
                                            icon: icondata
                                            });
         
    markers.push(marker);
        google.maps.event.addListener(marker, 'click', function() {
        	var LatLng = this.position;

            parkMarkerLat = LatLng.lat();
            parkMarkerLon = LatLng.lng();

            if(hourly=="N/A")
                hourly="未知";
            
            if(available=="N/A")
            	available="未知";
            
            if(total=="N/A")
            	total="未知";

            if(subType == 0)
                subType="平面";
            else if(subType == 1)
                subType="機械";
            else if(subType == 2)
                subType="平面/機械";

            if(access == 0)
                subtype="無";
            else if(access == 1)
                subtype="有";

            $('.modal-title').text(name);
            $( "div.exinfo.text-right" ).html('目前收費：<span class="num">'+hourly+'</span> 元/時');
            $( ".exdetail" ).empty();
            if(!(address=="N/A"))
                $( ".exdetail" ).append( "<p>地址：<span>"+address+"</span></p>" );

            if(!(open=="N/A"))
                $( ".exdetail" ).append( "<p>營業時間：<span>"+open+"</span></p>" );
            
            //if(!(available=="N/A"))
                $( ".exdetail" ).append( "<p>即時車位/總車位：<span>"+available+"/"+total+"</span></p>" );

            if(!(subType=="N/A"))
                $( ".exdetail" ).append( "<p>停車場種類：<span>"+subType+"</span></p>" );
            
            if(!(height=="N/A"))
                $( ".exdetail" ).append( "<p>限高：<span>"+height+"</span></p>" );

            if(!(access=="N/A"))
                $( ".exdetail" ).append( "<p>無障礙服務：<span>"+access+"</span></p>" );
            $('#app-msg').modal('show');                                                   
        });
    }
    
function goodFunction() {
    console.log("good");
}    
    
//Sets the map on all markers in the array.
function setMapOnAll(map) {
    for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(map);
    }
}
// Removes the markers from the map, but keeps them in the array.
function clearMarkers() {
    setMapOnAll(null);
}

// Shows any markers currently in the array.
function showMarkers() {
    setMapOnAll(map);
}

// Deletes all markers in the array by removing references to them.
function deleteMarkers() {
    clearMarkers();
    markers = [];
    lookup = [];
}
  
function goFunction() {
    setTimeout(function () {
        //$("#goodbutton").css("border","");
        infoWindow.close();
    }, 10);
    
    AndroidFunction.UpdateMyLoc_latlon();
    mylat = AndroidFunction.MyLoc_lat();
    mylon = AndroidFunction.MyLoc_lon();
    //alert(mylat+","+mylon);
    setGpsLatLon(mylat, mylon);
}

function setGpsLatLon(lat, lon) {
    clearMarkers();
    currentLat = lat;
    currentLon = lon;
    var routedata;
    routeFlag=0;
    setTimeout(function () {
        //alert("parkMarkerLat="+parkMarkerLat+",parkMarkerLon="+parkMarkerLon+",currentLat="+lat+",currentLon="+lon);
        var dragParkUrl = "https://ulcac3l8d4.execute-api.ap-northeast-1.amazonaws.com/beta/routeplan?srclon=" +
                currentLon + "&srclat=" + currentLat + "&dstlon=" + parkMarkerLon + "&dstlat=" + parkMarkerLat;
        parkJsonData = httpGet(dragParkUrl); //parking
        var markersData = JSON.parse(parkJsonData);
        var routepark = markersData.fastest.kml;
        routedata =  markersData.fastest.time;

        if(!(nyLayer0 == null)) {
            nyLayer0.setMap(null);
        }

        nyLayer1 = new google.maps.KmlLayer(
                routepark, {
                    suppressInfoWindows: true,
                    map: map,
                    preserveViewport: true
        	});
        isRouting = 1;
    }, 10);

}
    
  //test
    function gotoThere(){
        $('#app-msg').modal('hide');
        console.log("goto ....");
        //alert("goto ...");
        goFunction();
    }
  
    function setMyLocation(){
    	AndroidFunction.UpdateMyLoc_latlon();
    	mylat = AndroidFunction.MyLoc_lat();
        mylon = AndroidFunction.MyLoc_lon();
        markerMy.setMap(null);
        //alert(mylat+","+mylon);
        var my = new google.maps.LatLng(mylat,mylon);
        //var my = new google.maps.LatLng(23.675928,120.390419);
        markerMy = new google.maps.Marker({position: my, map: map, icon: image});
        //map.setCenter(new google.maps.LatLng(23.675928,120.390419), 14);
        map.setCenter(new google.maps.LatLng(mylat,mylon), 14);
    }

    google.maps.event.addDomListener(window, 'load', initialize);
    </script>
</head>

<body>
    <div id="map-canvas"></div>
    <div id="myDiv"></div>
    <!-- MSG -->
<div class="modal" id="app-msg">
    <div class="modal-dialog app-msg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
                <h4 class="modal-title">嘟嘟房停車場</h4>
            </div>
            <div class="modal-body">
                <div class="exinfo text-right">
                    費率：一小時 <span class="num">60</span> 元
                </div>
                <div class="exdetail">
                    <!--<p>地址：<span>台北市民生東路四段122號</span></p>-->
                    <!--<p>營業時間：<span>7:00～24:00</span></p>-->
                    <!--<p>即時車位數/總車位數：<span>250 </span></p>-->
                    <!--<p>停車場種類：<span>平面/機械 </span></p>-->
                    <!--<p>限高：<span>190公尺 </span></p>-->
                    <!--<p>無障礙服務：<span>有</span></p>-->
                </div>
            </div>
            <!--  modal body end -->
            <!-- 按鈕 -->
            <!-- -->
            <div class="modal-footer">
                <a href="javascript:void(0)" class="btn lightblue" data-dismiss="modal" >知道了</a>
                <a href="javascript:gotoThere()" class="btn lightblue" >前往此處</a>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>
<!-- /.modal -->
</body>

</html>
